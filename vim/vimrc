"""""""""" PLUGINS """""""""
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'morhetz/gruvbox'
" Plug 'vim-airline/vim-airline'
Plug 'itchyny/lightline.vim'
Plug 'andymass/vim-matchup'
Plug 'vim-ruby/vim-ruby'
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-endwise'
Plug 'nvie/vim-flake8'
Plug 'tpope/vim-commentary'
Plug 'metakirby5/codi.vim'
Plug 'romainl/vim-cool'
Plug 'Townk/vim-autoclose'
Plug 'xavierd/clang_complete'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/django.vim'
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'peitalin/vim-jsx-typescript'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'jparise/vim-graphql'
Plug 'Glench/Vim-Jinja2-Syntax', { 'for': ['html', 'jinja'] }
Plug 'tweekmonster/django-plus.vim'
Plug 'prettier/vim-prettier', { 'do': 'yarn install'}

Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
            \ 'coc-tsserver',
            \ 'coc-python'
            \ ]

if isdirectory('./node_modules') && isdirectory('./node_modules/prettier')
    let g:coc_global_extensions += ['coc-prettier']
endif

if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
    let g:coc_global_extensions += ['coc-eslint']
endif

function! ShowDocIfNoDiagnostic(timer_id)
    if (coc#util#has_float() == 0)
        silent call CocActionAsync('doHover')
    endif
endfunction

function! s:show_hover_doc()
    call timer_start(500, 'ShowDocIfNoDiagnostic')
endfunction

autocmd CursorHoldI * :call <SID>show_hover_doc()
autocmd CursorHold * :call <SID>show_hover_doc()

"{{ TMux - Vim integration

Plug 'edkolev/tmuxline.vim'
autocmd! User tmuxline.vim
            \ let g:tmuxline_powerline_separators = 0 |
            \ let g:tmuxline_theme = 'lightline' |
            \ let g:tmuxline_preset = {
            \ 'a':       '#S',
            \ 'b':       '#W',
            \ 'c':       '%R',
            \ 'win':     '#I #W',
            \ 'cwin':    '#I #W',
            \ 'x':       '',
            \ 'y':       '',
            \ 'z':       '',
            \ 'options': { 'status-justify': 'right' }
            \ }}
" let g:tmuxline_theme = 'lightline'
" Plug 'christoomey/vim-tmux-navigator'
" let g:tmux_navigator_save_on_switch = 1

"}}

call plug#end()

"""""""""" CONFIG """"""""""
let g:loaded_matchit = 1

" Tag jumping
command! MakeTags !ctags -R .
"""" --> now can use C-] to jump to tag under cursor
"""" --> gC-] for ambiguous tags
"""" --> C-t to jump back up the tag stack

" Vim autocomplete
" ^x^n for just this file
" ^x^f for filenames
" ^x^] for tags only
" ^n for anything specified by complete
"   browse lists with ^n / ^p

set encoding=UTF-8
set shiftwidth=4 
set softtabstop=4 " tab width when editing
set expandtab " turns tabs into spaces

set nocompatible
syntax on " turn on syntax highlighting
filetype plugin indent on " :help filetype-overview

set omnifunc=syntaxcomplete#Complete " enable auto-completion

inoremap <lt>// </<C-x><C-o><Esc>==gi
"enable HTML tab autocompletion with <//

inoremap <NUL> <C-X><C-O>
" change autocomplete shortcut

" Change cursor shape between insert and normal mode in iTerm2.app
" if $TERM_PROGRAM =~ "iTerm" || $TERM_PROGRAM =~ "TMUX"
"       let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
"   let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
" endif

if exists('$TMUX')
    " tmux will only forward escape sequences to the terminal if surrounded by a DCS sequence
    let &t_SI .= "\<Esc>Ptmux;\<Esc>\<Esc>[5 q\<Esc>\\"
    let &t_EI .= "\<Esc>Ptmux;\<Esc>\<Esc>[0 q\<Esc>\\"
    autocmd VimLeave * silent !echo -ne "\033Ptmux;\033\033[0 q\033\\"
else
    let &t_SI .= "\<Esc>[5 q"
    let &t_EI .= "\<Esc>[0 q"
    autocmd VimLeave * silent !echo -ne "\033[0 q"
endi

set autoindent
set smartindent

set ignorecase smartcase
set hlsearch incsearch

" path to directory where library can be found
let g:clang_library_path='/Library/Developer/CommandLineTools/usr/lib/libclang.dylib'

"""""""""" DISPLAY """"""""""

set number " show line numbers
set numberwidth=5

" Enable true color
" Use true colors in vim under tmux
" https://github.com/tmux/tmux/issues/1246
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif

set background=dark

" let g:airline_theme='gruvbox'
set noshowmode " stop insert/normal prompt with lightline
set laststatus=2
let g:lightline = {
            \ 'colorscheme': 'gruvbox',
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ],
            \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
            \ },
            \ 'component_function': {
            \   'gitbranch': 'FugitiveHead'
            \ },
            \ }

let g:gruvbox_contrast_dark="soft"
let g:gruvbox_contrast_light="soft"
colorscheme gruvbox

" colorscheme spacegray
" colorscheme material
" colorscheme solarized


"""""""""" REMAPPINGS """"""""""

" ----> disable arrow keys
nnoremap <up>    <nop>
nnoremap <down>  <nop>
nnoremap <left>  <nop>
nnoremap <right> <nop>
inoremap <up>    <nop>
inoremap <down>  <nop>
inoremap <left>  <nop>
inoremap <right> <nop>

inoremap jk <ESC> " remap escape key to jk roll

let mapleader = ","
let g:user_emmet_leader_key="\<leader>"

" " Copy to clipboard
" into + register
set clipboard=unnamed

vnoremap  <leader>y  "+y    " yank
nnoremap  <leader>Y  "+yg_  " yank entire buffer
nnoremap  <leader>y  "+y    " yank
nnoremap  <leader>yy  "+yy  " yank line

" " Paste from clipboard
nnoremap <leader>p "+p      " paste next line
nnoremap <leader>P "+P      " paste prev line
vnoremap <leader>p "+p
vnoremap <leader>P "+P

set backspace=2

nmap <leader>q <Plug>(Prettier)

" Remap save, save+quit
inoremap <C-W> <Esc>:w!<Cr>
" nnoremap <C-W> :w!<Cr>
nnoremap zz :w!<Cr>
nnoremap ZZ :wq<Cr>


autocmd FileType html let b:surround_100 = "{% \r %}"
autocmd FileType html let b:surround_68 = "{{ \r }}"


"""""""""" FINDING FILES """"""""""
set path+=** " search down into sub-folders with tab-completion
set wildmenu " display all matching files with tab complete

" Netrw file navigation
" :edit folder to open file browser
" <CR>/o/v/t to open file in window/sp/vs/tab
" let g:netrw_liststyle = 3 " tree view
let g:netrw_banner = 0 " remove the top banner
" let g:netrw_browse_split = 4 " Allows files to open in different tabs/windows --->
" 1 -> new horizontal split
" 2 -> new vertical split
" 3 -> new tab
" 4 -> previous window
" let g:netrw_winsize = 10
let g:netrw_altv = 1 " Opens splits to the right
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" Open netrw automatically when vim starts
"augroup ProjectDrawer
"  autocmd!
"  autocmd VimEnter * :Vexplore
"augroup END

"""" SNIPPETS EXAMPLE"""""
" https://www.youtube.com/watch?v=XA2WjJbmmoM minute 38:20
nnoremap <leader>mainp :-1read $HOME/.vim/snippets/main_skeleton.py<CR>o


" Open vimrc from any buffer
" source changes when save and close
nnoremap <leader>vrc :tabe ~/dotfiles/vim/vimrc<cr>
autocmd bufwritepost ~/dotfiles/vim/vimrc source $MYVIMRC

""""""""""" SPLITS """""""""""

" nnoremap <leader>j <C-W><C-J>
" nnoremap <leader>k <C-W><C-K>
" nnoremap <leader>l <C-W><C-L>
" nnoremap <leader>h <C-W><C-H>

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

set splitbelow
set splitright

" toggle relative/absolute line numbers"
"
set number relativenumber

augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" keep cursor in middle of screen 
nnoremap j jzz
nnoremap k kzz

" Save/restore folds in files
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview

" vim-ruby
let g:ruby_indent_access_modifier_style = 'normal'
let g:ruby_indent_assignment_style = 'variable'
let g:ruby_indent_block_style = 'do'

" Enable folding
set foldmethod=indent
set foldlevel=99

nnoremap <leader>f za

" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
            \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

set cc=80
"""""""""""""""""""""""" MACROS """""""""""""""""""""""""""""

" This allows you to visually select a section and then hit @ to run a macro on all lines.
" Only lines which match will change.
" https://github.com/stoeffel/.dotfiles/blob/master/vim/visual-at.vim

xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>
function! ExecuteMacroOverVisualRange()
    echo "@".getcmdline()
    execute ":'<,'>normal @".nr2char(getchar())
endfunction
